import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import math
from scipy import stats

# –≤–∞—Ä–∏–∞–Ω—Ç
array_data = np.array([
    1.18, 1.40, 1.49, 1.50, 1.54, 1.16, 1.39, 1.49, 1.51, 1.54,
    1.30, 1.61, 1.49, 1.52, 0.54, 1.38, 1.61, 1.50, 1.52, 1.52,
    1.54, 1.50, 1.50, 1.49, 1.51, 1.55, 1.51, 1.49, 1.49, 1.52,
    1.50, 1.49, 1.49, 1.51, 1.54, 1.48, 1.50, 1.49, 1.51, 1.54,
    1.59, 1.50, 1.49, 1.50, 1.44, 1.53, 1.50, 1.49, 1.49, 1.44,
    1.64, 1.49, 1.50, 1.46, 1.47, 1.68, 1.49, 1.49, 1.46, 1.47,
    1.52, 1.49, 1.50, 1.51, 1.46, 1.48, 1.49, 1.50, 1.52, 1.49,
    1.47, 1.49, 1.49, 1.50, 1.47, 1.45, 1.49, 1.49, 1.50, 1.48,
    1.50, 1.50, 1.55, 1.54, 1.52, 1.55, 1.50, 1.75, 1.54, 1.53,
    1.56, 1.49, 1.51, 1.48, 1.54, 1.59, 1.49, 1.49, 1.48, 1.55
])
a = 0.1


def hist(q):
    # —Ä–∞–∑–º–∞—Ö
    data_diff = np.max(array_data) - np.min(array_data)

    # —à–∏—Ä–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    width = data_diff / q
    print(f"–®–∏—Ä–∏–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: ", width)

    # –ó–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    bins = np.arange(np.min(array_data), np.max(array_data) + width, width)

    # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    plt.hist(array_data, bins=bins, edgecolor='black')
    plt.title(f'q = {q}')
    plt.xlabel('–ó–Ω–∞—á–µ–Ω–∏—è')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.show()

    # –¥–∞–Ω–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    hist, bin_edges = np.histogram(array_data, bins=q)
    # –¢–∞–±–ª–∏—Ü–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    table = pd.DataFrame({'–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': bin_edges[:-1],
                          '–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞': bin_edges[1:],
                          '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π': hist})
    print(f'–¢–∞–±–ª–∏—Ü–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã')
    print(table)


def compute(q):
    # —Ç–æ—á–µ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è (—Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ)
    print("\n–¢–æ—á–µ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è: ", np.mean(array_data))

    # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω—ã - –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –≤ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä—è–¥—É.
    print("–ú–µ–¥–∏–∞–Ω–∞:", np.median(array_data))

    # –º–æ–¥–∞ - –ª—é–±–∞—è —Ç–æ—á–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞ ( –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤ –≤—ã–±–æ—Ä–∫–µ)
    print("–ú–æ–¥–∞:", pd.Series(array_data).mode()[0])

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
    # –º–µ—Ä—É —Ä–∞–∑–±—Ä–æ—Å–∞ –∏–ª–∏ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –≤—ã–±–æ—Ä–∫–µ
    print("–¢–æ—á–µ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ :", np.var(array_data))

    # –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    # –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", math.sqrt(np.var(array_data)))

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å—Ç–µ–ø–µ–Ω–∏ —Å–∫–æ—à–µ–Ω–Ω–æ—Å—Ç–∏ (–∞—Å–∏–º–º–µ—Ç—Ä–∏–∏) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    mean_value = np.mean(array_data)
    std_dev = np.std(array_data)
    skewness = np.sum((array_data - mean_value) ** 3) / (len(array_data) * std_dev ** 3)
    print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏:", skewness)
    # -5 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à—É—é –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, —Å–º–µ—â–µ–Ω–∏–µ

    # –≠–∫—Å—Ü–µ—Å—Å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å—Ü–µ—Å—Å–∞) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç—Ä–æ–≤–µ—Ä—à–∏–Ω–Ω–æ—Å—Ç–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    mean_value = np.mean(array_data)
    std_dev = np.std(array_data)
    kurtosis = np.sum((array_data - mean_value) ** 4) / (len(array_data) * std_dev ** 4) - 3

    print("–≠–∫—Å—Ü–µ—Å—Å:", kurtosis)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    std_dev = np.std(array_data)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É —Å—Ä–µ–¥–Ω–µ–≥–æ
    sem = std_dev / np.sqrt(len(array_data))

    print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ:", sem)

    # –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞

    # –í—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
    confidence_level = 1 - a

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    z_critical = np.abs(stats.norm.ppf((1 - confidence_level) / 2))

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    moe = z_critical * sem

    print("–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", moe)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∏—Å—Ç–∏–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    mean_value = np.mean(array_data)
    confidence_interval = (mean_value - z_critical * sem, mean_value + z_critical * sem)

    print(f"{confidence_level * 100}% –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {confidence_interval}")


def compute_hi(q):
    ### –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    interval_bounds = np.linspace(array_data.min(), array_data.max(), q + 1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    mean, std_dev = np.mean(array_data), np.std(array_data)
    norm_dist = stats.norm(loc=mean, scale=std_dev)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    theoretical_probabilities = np.diff(norm_dist.cdf(interval_bounds))
    print("theor", sum(theoretical_probabilities))
    print()
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("–ì—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:", interval_bounds)
    hist, _ = np.histogram(array_data, bins=q)
    print("–ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:", hist)
    print("—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –≤ —á–∞—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
          theoretical_probabilities)
    # –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 (–∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    denominator = []
    for i in range(q):
        denominator.append(theoretical_probabilities[i] * 100)
    print("–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å N * p", denominator)

    # —á–∏—Å–ª–∏—Ç–µ–ª—å (n_j - N*p)^2
    # –¥–∞–Ω–Ω—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    hist_values, values = np.histogram(array_data, bins=q)
    print("pract",values)
    numerator = []
    for i in range(q):
        numerator.append((hist_values[i] - denominator[i]) ** 2)
    print("–ß–∏—Å–ª–∏—Ç–µ–ª—å (n_j - N*p)^2", numerator)

    # —Ö–∏
    hi = []
    for i in range(q):
        hi.append(numerator[i] / denominator[i])
    print("–•–∏ –∑–Ω–∞—á–µ–Ω–∏—è", hi)

    print("–•–∏ —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤: ", sum(hi))

    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è ùúí 2
    # , –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –æ
    # –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤ –∫–∞–∂–¥–æ–º
    # —á–∞—Å—Ç–∏—á–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ –º–µ–Ω–µ–µ –ø—è—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º
    # —Å–ª—É—á–∞–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —ç—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏.
    # –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —á–∞—Å—Ç–æ—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã.


q_min = math.ceil(0.55 * 100 ** 0.4 + 1)  # +-1 –ø–æ –∑–∞–¥–∞–Ω–∏—é
q_max = math.ceil(1.25 * 100 ** 0.4 - 1)  #

print("q_min: ", q_min)
print("q_max: ", q_max)

print(f'\n–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è q={q_min}')
hist(q_min)
print(f'\n–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è q={q_max}')
hist(q_max)
print(f'\n–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
compute(q_max)
compute_hi(q_max)



